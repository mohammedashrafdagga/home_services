openapi: 3.0.3
info:
  title: HomeServices
  version: 1.0.0
  description: Building API for Home Services Application
paths:
  /api/auth/change-password/:
    post:
      operationId: api_auth_change_password_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassword'
          description: ''
  /api/auth/login/:
    post:
      operationId: api_auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/auth/login-refresh/:
    post:
      operationId: api_auth_login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/logout/:
    post:
      operationId: api_auth_logout_create
      description: |-
        Takes a token and blacklists it. Must be used with the
        `rest_framework_simplejwt.token_blacklist` app installed.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBlacklist'
          description: ''
  /api/auth/register/:
    post:
      operationId: api_auth_register_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /api/auth/resend-code/:
    post:
      operationId: api_auth_resend_code_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendCode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendCode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendCode'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendCode'
          description: ''
  /api/auth/reset-new-password/:
    post:
      operationId: api_auth_reset_new_password_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPassword'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPassword'
          description: ''
  /api/auth/reset-password-code/:
    post:
      operationId: api_auth_reset_password_code_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordRequest'
          description: ''
  /api/auth/verify-code/:
    post:
      operationId: api_auth_verify_code_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyCode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyCode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyCode'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyCode'
          description: ''
  /api/auth/verify-reset-password-code/:
    post:
      operationId: api_auth_verify_reset_password_code_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRestPasswordCode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyRestPasswordCode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyRestPasswordCode'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyRestPasswordCode'
          description: ''
  /api/services/{id}/detail/:
    get:
      operationId: api_services_detail_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Services'
          description: ''
  /api/services/categories/:
    get:
      operationId: api_services_categories_list
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
  /api/services/category/{id}/services/:
    get:
      operationId: api_services_category_services_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryWithServices'
          description: ''
components:
  schemas:
    Category:
      type: object
      properties:
        name:
          type: string
          maxLength: 20
        count_services:
          type: string
          readOnly: true
        category_services:
          type: string
          format: uri
          readOnly: true
      required:
      - category_services
      - count_services
      - name
    CategoryWithServices:
      type: object
      properties:
        name:
          type: string
          maxLength: 20
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServicesCategory'
          readOnly: true
      required:
      - name
      - services
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
        new_password1:
          type: string
          writeOnly: true
        new_password2:
          type: string
          writeOnly: true
      required:
      - new_password1
      - new_password2
      - old_password
    IncludeServices:
      type: object
      properties:
        descriptions:
          type: string
          maxLength: 255
      required:
      - descriptions
    NotIncludeServices:
      type: object
      properties:
        descriptions:
          type: string
          maxLength: 255
      required:
      - descriptions
    ResendCode:
      type: object
      properties:
        email:
          type: string
          format: email
          writeOnly: true
      required:
      - email
    ResetPassword:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
        new_password1:
          type: string
          writeOnly: true
        new_password2:
          type: string
          writeOnly: true
      required:
      - new_password1
      - new_password2
      - token
    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          writeOnly: true
      required:
      - email
    Services:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        price_from:
          type: integer
          maximum: 2147483647
          minimum: 0
        price_to:
          type: integer
          maximum: 2147483647
          minimum: 0
        include_services:
          type: array
          items:
            $ref: '#/components/schemas/IncludeServices'
          readOnly: true
        not_include_services:
          type: array
          items:
            $ref: '#/components/schemas/NotIncludeServices'
          readOnly: true
      required:
      - id
      - include_services
      - name
      - not_include_services
    ServicesCategory:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        price_from:
          type: integer
          maximum: 2147483647
          minimum: 0
        price_to:
          type: integer
          maximum: 2147483647
          minimum: 0
        detail:
          type: string
          format: uri
          readOnly: true
      required:
      - detail
      - name
    TokenBlacklist:
      type: object
      properties:
        refresh:
          type: string
      required:
      - refresh
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        password:
          type: string
          writeOnly: true
          minLength: 8
      required:
      - email
      - first_name
      - last_name
      - password
    VerifyCode:
      type: object
      properties:
        code:
          type: string
          writeOnly: true
          maxLength: 5
      required:
      - code
    VerifyRestPasswordCode:
      type: object
      properties:
        code:
          type: string
          writeOnly: true
      required:
      - code
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
